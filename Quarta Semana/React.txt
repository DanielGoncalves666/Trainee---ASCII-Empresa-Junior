Biblioteca para construção de interfaces no frontEnd.
	Tudo que o usuário pode enxergar o React pode ser usado.
	
Utilizado para construção de Single-Page Applications (SPA). Tudo uma página só, ela não recarrega.
Quando usamos React tudo fica dentro do javascript.
	Podemos retornar código html de dentro de funções no javascript. É possível por causa do JSX.

Componentização
	O que engloba toda a tela é o App.

React usa o paradigma declarativo.

====================== Conceitos Importantes ===================
Componente
Propriedade
Estado
================================================================

==== Importação ====
	Sempre é necessário importar o react.

import React from 'react';

==== Babel ==== 
	Converter (transpilar) código do React para um código que o browser entenda.

==== Webpack ====
Webpack: para cada tipo de arquivo (.js, .css, .png) eu vou converter o código de uma maneira diferente.
Loaders: babel-loader, css-loader, image-loader.
      	Utilizado pelo webpack.
      	
================== Adição ==================

==== Adição do React no Projeto ====
yarn add react react-dom

	react é o framework
	react-dom é a integração do rect com a DOM do HTML.

==== Adição do Babel e Webpack ====
yarn add @babel/core @babel/preset-env @babel/preset-react webpack webpack-cli
	@babel/core -->
	@babel/preset-env --> converte um javascript mais moderno para um mais antigo, baseado no ambiente da nossa aplicação. Converte apenas as funcionalidades que o browser ainda não entende
		env vem de enviroment, ambiente, vai entender o ambiente que a aplicação está sendo executada e converter o código baseado nisso.
	@babel/preset-react --> adiciona as funcionalidades do react na conversão
	webpack -->
	webpack-cli -->

yarn add @babel/cli
	interface de linha de comando que nos permite usar o babel desta forma:
		yarn babel arquivo --out-file arquivoDestino
		
yarn add babel-loader
	instalar o loader do babel

yarn add style-loader css-loader
	instalar o loader de css
		style-loader --> pega o css interpretado pelo css-loader e injeta dentro do html.
		css-loader --> pega o arquivo css, vê as importações, e passa tudo para o webpack.
		
yarn add file-loader
	instalar o loader de arquivos de imagens
	
O webpack não fica monitorando as alterações e re-compilando. Usamos então:
	yarn add webpack-dev-server --D
		servidor de desenvolvimento do webpack
		
yarn add @babel/plugin-transform-runtime
	necessário para poder usar async
	Adicionamos esse no array plugins do arquivo babel

==== Configurando o Babel ====

cria-se um arquivo: babel.config.js no root do projeto
	é onde ficam as configurações referentes ao babel
	
		module.exports = {
			presets: [
				'@babel/preset-env',
        		'@babel/preset-react'
			]
		}
		
		o presets nos permite utilizar configurações de terceiros
		
		podemos utilizar esta configuração em todo projeto react, é um padrão.
		
==== Configurando o WebPack ====
cria-se um arquivo: webpack.config.js no root do projeto

O babel converte apenas JS. O Webpack é responsável por identificar o tipo de arquivo e ativar um loader. No caso de arquivo js, esse loader tende a ser o babel. Podemos ter css-loader e outros.

const path = require('path'); // é um módulo do node
			 // estamos importando o módulo na variável de mesmo nome

module.exports = {
	entry: path.resolve(__dirname, 'src', 'index.js'),
	output: {
		path: path.resolve(__dirname, 'public'),
		filename: 'bundle.js'
	},
	devServer: {
		static: path.resolve(__dirname, 'public')
	},
	module: {
		rules: [
			{
				test: /\.js$/,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader',
				}
			}
		]
	},
};

	entry --> arquivo de entrada da aplicação
	output --> qual arquivo será gerado depois de convertido
	devServer -->
		contentBase --> caminho para os arquivos públicos
	module --> iremos determinar os loaders específicos
		rules é um vetor de objetos, cada um sendo um loader
			test --> especifica os arquivos que devme ser considerados
			exclude --> arquivos que não devem ser considerados
			use --> loader que deve ser usado

__dirname é o diretório que o arquivo atual tá
procura no diretório src o arquivo index.js

yarn webpack --mode development
	para executar
	
yarn webpack-dev-server --mode development
	para executar usando o server de desenvolvimento do webpack
	
	Se adicionarmos: 
	"scripts": {
      "dev": "webpack-dev-server --mode development",
      "build": "webpack --mode production"
	},
	no arquivo package.json, podemos usar simplesmente yarn dev
	
		Toda vez que fazemos alterações no arquivo é necessário reiniciar o servidor
		
============ Componetização ============
Conjunto isolado de html, css e javascript que pode ser reutilizado.
Tudo no React é componente.

Colocamos letra maiúscula no ínicio do nome do arquivo para indicar um componente.
Um componente é simplesmente uma função que retorna html.

Todo componente precisa ter o react importado.
Escrevemos a função.
Exportamos de forma padrão ela:
	export default Funcao;
	
Todo componente pode ser usado em outras partes do código como se fosse uma tag html:
	<Funcao />
	
Podemos usar <Funcao> </ Funcao>, o que nos permite incluir html dentro do componente.	
	
Para fazermos:	
	<Funcao />
	<Funcao />
	
	precisamos envolver os componentes por algum container, como uma <div> 
	
==== Fragment ====
	Dois componentes não podem ficar um abaixo do outro diretamente, eles precisam ter um pai.

	Fragment é o uso de 
		<></>
	Quando criamos um contianer para envolver um ou mais componentes e não queremos que apareça visualmente.

=============== Propriedade ==================
É alguma informação que podemos passar de um componente pai para um componente filho.
Quando passamos um atributo para um componente:
	<Funcao title="titulo" />
	
Na função que representa o componente recebemos um único parâmetro: props, o qual conterá as propriedades passadas.
	Toda vez que queremos usar uma variável dentro do html no javascript usamos {}.

	Pra acessar o conteúdo de um componente, o que está entre <Funcao> </Funcao>, usamos a propriedade children. Ela contém todo esse conteúdo.

================= Estado e Imutabilidade ======================
Precisamos importar:
	import {userState} from 'react';

const projects = useState(["Desenvolvimento de app", "Front-end Web"]);
	Invés de criar um array estático, passamos o array para a função useState.
	Essa função retorna um array com 2 posições: 
		1 - a variável com seu valor inicial
		2 - função para atualizarmos esse valor.
		
	Poderíamos então desestruturar o retorno do useState:
		[projects, setProjects]
		
	Toda vez que chamaos a função setProjects o React pede pro browser redenrizar novamente o componente.

==== Imutabilidade
	Não podemos alterar o valor de variáveis. Precisamos sempre recriar as informações.
	Devemos evitar no React funções que alteram diretamente a informação, como push.
	Sempre devemos criar uma nova informação:
		setProjects([...projects, `Novo Projeto ${Date.now()}`]);
	
================ API ==================
yarn add axios 
	axios é responsável por realizar as chamadas API no Front-end. Conectar o frontend com o backend.
	
Criamos uma pasta chamada services. Essa pasta armazenará qualquer tipo de arquivo que fornecerá comunicação com algum serviço externo.

useEffect --> importado do react. Método usado para disparar funções sempre que tivermos alguma alteração.
	Dois parâmetros:
		função que queremos disparar
		quando queremos disparar ( array de dependências. Deixa vazio para disparar uma única vez. Inclui todas as variáveis que queremos que sejam monitoradas).
		
No backend precisamos instalar o cors
		yarn add cors		
Isso se deve por questões de segurança 	

Em seguida, importamos o cors no backend e:
	app.use(cors());

Isso permite que qualquer frontend obtenha as informações do backend. Podemos passar as informações da origem do frontend que pode ter acesso.

